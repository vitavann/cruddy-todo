const fs = require('fs');
const path = require('path');
const _ = require('underscore');
const counter = require('./counter');

var items = {};

// Public API - Fix these CRUD functions ///////////////////////////////////////

/*The next step is to start saving new todos on the hard drive by refactoring create. Each new todo entry must be saved in its own file. Use the unique id generated by getNextUniqueId to create a file path inside the dataDir. Each time a POST request is made to the collection route, save a file with the todo item in this folder. Only save the todo text in the file, the id of the todo item is encoded into its filename -- DO NOT STORE AN OBJECT.

Verify this is working by checking to see:

The value that is saved in counter.txt increases with each new todo item created
The number of files in dataDir increases with each new todo item created
The contents of each file contain only the text of that todo item
*/

exports.create = (text, callback) => {
  counter.getNextUniqueId((err, data) => {
    if ( err ) {
      throw ( err );
    } else {
      // fs.writeFile(exports.dataDir(_))
      console.log('inside create function', `${data}`, callback)
      // items[id] = text;
      // callback(null, { id, text });
    }
  });
};

exports.readAll = (callback) => {
  var data = _.map(items, (text, id) => {
    return { id, text };
  });
  callback(null, data);
};

exports.readOne = (id, callback) => {
  var text = items[id];
  if (!text) {
    callback(new Error(`No item with id: ${id}`));
  } else {
    callback(null, { id, text });
  }
};

exports.update = (id, text, callback) => {
  var item = items[id];
  if (!item) {
    callback(new Error(`No item with id: ${id}`));
  } else {
    items[id] = text;
    callback(null, { id, text });
  }
};

exports.delete = (id, callback) => {
  var item = items[id];
  delete items[id];
  if (!item) {
    // report an error if item not found
    callback(new Error(`No item with id: ${id}`));
  } else {
    callback();
  }
};

// Config+Initialization code -- DO NOT MODIFY /////////////////////////////////

exports.dataDir = path.join(__dirname, 'data');

exports.initialize = () => {
  if (!fs.existsSync(exports.dataDir)) {
    fs.mkdirSync(exports.dataDir);
  }
};
